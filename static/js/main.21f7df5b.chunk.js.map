{"version":3,"sources":["static/872536.png","compenents/clock/Clock.js","compenents/search/index.js","compenents/weather/index.js","compenents/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","Date","toLocaleTimeString","date","_this2","timer","setInterval","setState","toLocaleDateString","day","getDay","clearInterval","react_default","a","createElement","className","React","Component","Search","e","keyCode","target","value","window","open","src","require","alt","onKeyDown","handSeacrch","type","placeholder","Weather","weather","cond_code","tips","iconImg","fetch","then","res","json","data","HeWeather6","status","concat","now","cond_txt","componentName","clock_Clock","search_Search","weather_Weather","App","react_router_dom","react_router","path","exact","component","Home","DateDetail","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+KAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qNC4DzBC,qBAxDX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,MAAM,IAAIC,MAAOC,qBACjBC,MAAM,IAAIF,MAAOC,sBAJPV,mFAOC,IAAAY,EAAAT,KAEfA,KAAKU,MAAQC,YAAY,WACrBF,EAAKG,SAAS,CACVP,MAAM,IAAIC,MAAOC,qBACjBC,MAAM,IAAIF,MAAOO,qBACjBC,KAAK,IAAIR,MAAOS,YAEtB,oDA4BFC,cAAchB,KAAKU,wCAGnB,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQpB,KAAKI,MAAMI,MACnCS,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQpB,KAAKI,MAAMC,MACnCY,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAhB,eAAyBpB,KAAKI,MAAMU,aAnDhCO,IAAMC,YCALC,6LACPC,GACO,KAAdA,EAAEC,SAAiC,KAAjBD,EAAEE,OAAOC,OAC5BC,OAAOC,KAAK,wBAA0BL,EAAEE,OAAOC,wCAQ1C,IAAA9B,EAAAG,KACP,OACEiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,OAAKW,IAAKC,EAAQ,IAA4BC,IAAI,KAClDf,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,mDAA+BH,EAAAC,EAAAC,cAAA,WAA/B,mCAEAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cAAaa,UAAW,SAACT,GAAK3B,EAAKqC,YAAYV,IAAKW,KAAK,OAAOC,YAAY,SAC7FnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAnBaE,cCAfe,qBACnB,SAAAA,IAAa,IAAAxC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IACXxC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,QACKI,MAAQ,CACXkC,QAAQ,CACNC,UAAW,IAEbC,KAAK,GACLC,QAAQ,IAPC5C,oFAUO,IAAAY,EAAAT,KAClB0C,MAAM,wFAAwFC,KAAK,SAACC,GAClG,OAAOA,EAAIC,SACVF,KAAK,SAACG,GACP,GAAGA,EAAKC,YAA0C,OAA9BD,EAAKC,WAAW,GAAGC,OAAgB,CACrD,IAAIP,EAAO,uCAAAQ,OAA0CH,EAAKC,WAAW,GAAGG,IAAIX,UAAjE,QACX9B,EAAKG,SAAS,CACZ0B,QAASQ,EAAKC,WAAW,GAAGG,IAC5BV,KAAK,gGACLC,iBAGFhC,EAAKG,SAAS,CACZ0B,QAAS,yDACTE,KAAK,mHAMX,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZpB,KAAKI,MAAMkC,QAAQa,SACpBlC,EAAAC,EAAAC,cAAA,OAAKa,IAAI,GAAGF,IAAK9B,KAAKI,MAAMqC,QAASrB,UAAU,iBAEjDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZpB,KAAKI,MAAMoC,cAtCelB,cCEhB8B,mLAEjB,OACEnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,cANmCjC,aCgB5BkC,0LAZX,OACEvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IAEjC7C,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWE,aAPxBzC,cCKE0C,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.21f7df5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/872536.891f3630.png\";","import React from 'react'\nimport './index.css'\n\nclass Clock extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            time: new Date().toLocaleTimeString(),\n            date: new Date().toLocaleTimeString()\n        }\n    }\n    componentDidMount(){\n\n        this.timer = setInterval(()=>{\n            this.setState({\n                time: new Date().toLocaleTimeString(),\n                date: new Date().toLocaleDateString(),\n                day: new Date().getDay()\n            })\n        },100)\n\n        // fetch('http://api.833cc.cc/v1/ServerTime').then((res)=>{\n        //     return res.json()\n        // }).then((data)=>{\n        //     if(data.code === 200){\n        //         let cha  = new Date().getTime() - data.data;\n\n        //         if(Math.abs(cha)<= 30000){\n                    \n        //             this.timer = setInterval(()=>{\n        //                 this.setState({\n        //                     time: new Date().toLocaleTimeString(),\n        //                     date: new Date().toLocaleDateString(),\n        //                     day: new Date().getDay()\n        //                 })\n        //             },100)\n        //         }else{\n        //             console.log(cha)\n        //             this.setState({\n        //                 time: '小可爱的电脑的时间不准！！！'\n        //             })\n        //         }\n        //     }\n        // })\n        \n    }\n    componentWillUnmount(){\n        clearInterval(this.timer)\n    }\n    render(){\n        return (\n            <div className='timeBox'>\n                <span className='date'>{this.state.date}</span>\n                <span className='time'>{this.state.time}</span>\n                <span className='day'>星期{this.state.day}</span>\n            </div>\n        )\n    }\n}\n\nexport default Clock","import React, { Component } from 'react'\nimport './index.css'\n\nexport default class Search extends Component {\n  handSeacrch(e){\n    if(e.keyCode === 13&&e.target.value!==''){\n      window.open('//www.baidu.com/s?wd=' + e.target.value)\n    }\n  }\n  // componentWillMount(){\n  //   fetch('https://free-api.heweather.net/s6/weather/forecast?location=shiyan&key=HE1903061702461886').then((res)=>{\n  //     console.log(res)\n  //   })\n  // }\n  render() {\n    return (\n      <div className='searchBox'>\n        <div className=\"birthday\">\n        <img src={require('../../static/872536.png')} alt='' />\n        <span className='text'>媛媛生日快乐呀～<br/>嘿嘿嘿嘿嘿</span>\n        </div>\n        <input className='searchInput'onKeyDown={(e)=>{this.handSeacrch(e)}} type='text' placeholder='emmm'/>\n        <div className=\"go\"></div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './index.css'\n\nexport default class Weather extends Component {\n  constructor(){\n    super()\n    this.state = {\n      weather:{\n        cond_code: ''\n      },\n      tips:'',\n      iconImg:''\n    }\n  }\n  componentWillMount(){\n    fetch('https://free-api.heweather.net/s6/weather/now?location=shiyan&key=HE1903061702461886').then((res)=>{\n      return res.json()\n    }).then((data)=>{\n      if(data.HeWeather6&&data.HeWeather6[0].status === 'ok'){\n        let iconImg = `https://cdn.heweather.com/cond_icon/${data.HeWeather6[0].now.cond_code}.png`\n        this.setState({\n          weather: data.HeWeather6[0].now,\n          tips:'我不在身边要好好照顾自己嘤嘤嘤QAQ',\n          iconImg\n        })\n      }else{\n        this.setState({\n          weather: '不知道天气怎么样呢',\n          tips:'我不在身边要好好照顾自己QAQ'\n        })\n      }\n    })\n  }\n  render() {\n    return (\n      <div className='wrap'>\n        <div className='weather'>\n          {this.state.weather.cond_txt}\n          <img alt='' src={this.state.iconImg} className='weatherIcon'/>\n        </div>\n        <div className='tips'>\n          {this.state.tips}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Clock from './clock/Clock';\nimport Search from './search/index';\nimport Weather from './weather/index';\n\nexport default class componentName extends Component {\n  render() {\n    return (\n      <div>\n        <Clock />\n        <Search />\n        <Weather />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from './compenents/Home';\nimport DateDetail from './compenents/clock/Clock'\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route path=\"/\" exact component={Home} />\n          {/* <Route path=\"/about/\" component={About} /> */}\n          <Route path=\"/clock\" component={DateDetail} /> \n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import Welcome from './Welcome';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}