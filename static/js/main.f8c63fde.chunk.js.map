{"version":3,"sources":["static/searchTop.png","compenents/search/index.js","compenents/weather/index.js","compenents/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Search","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inputOnBlur","setState","focus","inputOnFocus","state","e","keyCode","target","value","window","open","_this2","react_default","a","createElement","className","concat","src","require","alt","onKeyDown","handSeacrch","type","placeholder","onFocus","onBlur","Component","Weather","weather","now","tmp","cond_txt","location","basic","tips","iconImg","time","date","day","fetch","then","res","json","data","HeWeather6","status","cond_code","timer","setInterval","Date","getDay","toLocaleTimeString","toLocaleDateString","clearInterval","componentName","search_Search","weather_Weather","App","react_router_dom","react_router","path","exact","component","Home","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f8c63fde.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/searchTop.f1167670.png\";","import React, { Component } from 'react'\nimport './index.css'\n\nexport default class Search extends Component {\n\n  constructor(){\n    super()\n    this.state = {\n      focus: false\n    }\n  }\n\n  handSeacrch(e){\n    if(e.keyCode === 13&&e.target.value!==''){\n      window.open('//www.baidu.com/s?wd=' + e.target.value)\n    }\n  }\n\n  inputOnBlur = ()=>{\n    this.setState({\n      focus:false\n    })\n  }\n\n  inputOnFocus = ()=> {\n    this.setState({\n      focus:true\n    })\n  }\n\n  render() {\n    return (\n      <div className='searchBox'>\n        <div className={`birthday ${this.state.focus?'move':''}`}>\n          <img src={require('../../static/searchTop.png')} alt='' />\n        </div>\n        <input className='searchInput'onKeyDown={(e)=>{this.handSeacrch(e)}} type='text' placeholder='emmm' onFocus={this.inputOnFocus} onBlur={this.inputOnBlur}/>\n        <div className=\"go\"></div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './index.css'\n\nexport default class Weather extends Component {\n  constructor() {\n    super()\n    this.state = {\n      weather: {\n        now: {\n          tmp:'',\n          cond_txt:'',\n          location:''\n        },\n        basic: {}\n      },\n      tips: '',\n      iconImg: '',\n      time:'',\n      date:'',\n      day:''\n    }\n  }\n  componentWillMount() {\n\n    fetch('https://free-api.heweather.net/s6/weather/now?location=shiyan&key=540136696a6840aa85cc8b67065a3ffb').then((res) => {\n      return res.json()\n    }).then((data) => {\n      if (data.HeWeather6 && data.HeWeather6[0].status === 'ok') {\n        let iconImg = `https://cdn.heweather.com/cond_icon/${data.HeWeather6[0].now.cond_code}.png`\n        this.setState({\n          weather: data.HeWeather6[0],\n          tips: '我不在身边要好好照顾自己嘤嘤嘤QAQ',\n          iconImg\n        })\n      }\n    })\n\n    this.timer = setInterval(() => {\n      let nowDay = new Date().getDay();\n      let dayArry = ['一','二','三','四','五','六','日'];\n      let day = dayArry[nowDay-1]\n      this.setState({\n        time: new Date().toLocaleTimeString(),\n        date: new Date().toLocaleDateString(),\n        day\n      })\n    }, 100)\n\n  }\n  componentWillUnmount() {\n    clearInterval(this.timer)\n  }\n  render() {\n    return (\n      <div className='wrap'>\n        <div className='timeBoxs'>\n          <div className='time'>{this.state.time}</div>\n          <div className='date'>{`${this.state.date}  星期${this.state.day}`}</div>\n        </div>\n        <div className='weather'>\n          <div className='top'>\n            <span className='temp'>{`${this.state.weather.now.tmp}℃`}</span>\n            <span className='cond'>{this.state.weather.now.cond_txt}</span>\n            <img alt='' src={this.state.iconImg} className='weatherIcon' />\n          </div>\n          <div className='bottom'>\n            {this.state.weather.basic.location}\n          </div>\n        </div>\n        {/* <div className='tips'>\n          {this.state.tips}\n        </div> */}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Search from './search/index';\nimport Weather from './weather/index';\n\nexport default class componentName extends Component {\n  render() {\n    return (\n      <div>\n        <Search />\n        <Weather />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from './compenents/Home';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route path=\"/\" exact component={Home} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import Welcome from './Welcome';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}